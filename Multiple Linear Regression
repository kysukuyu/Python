import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

waist_heights = np.array([[67,160],[68,165],[70,167],
                          [65,170],[80,165],[85,167],
                          [78,178],[79,182],[95,175],
                          [89,172]])
weights = np.array([50,60,65,65,
                    70,75,80,85,
                    90,81])
X = pd.DataFrame(waist_heights, columns=["Waist","Height"])
target = pd.DataFrame(weights, columns=["Weight"])
y = target["Weight"]

lm = LinearRegression()
lm.fit(X, y)
print("迴歸係數:", lm.coef_)
print("截距:",lm.intercept_)

new_waist_heights = pd.DataFrame(np.array([[66,164],[82,172]]))
predicted_weights= lm.predict(new_waist_heights)
print(predicted_weights)

迴歸係數: [0.71013574 1.07794276]
截距: -166.36459730650577
[57.28697457 77.2726885 ]

預測模型
from sklearn import datasets

boston = datasets.load_boston()
print(boston.keys())
dict_keys(['data', 'target', 'feature_names', 'DESCR', 'filename'])

print(boston.data.shape)
(506, 13)

print(boston.feature_names)
['CRIM' 'ZN' 'INDUS' 'CHAS' 'NOX' 'RM' 'AGE' 'DIS' 'RAD' 'TAX' 'PTRATIO'
 'B' 'LSTAT']
 
 print(boston.DESCR)
 .. _boston_dataset:

Boston house prices dataset
---------------------------

**Data Set Characteristics:**  

    :Number of Instances: 506 

    :Number of Attributes: 13 numeric/categorical predictive. Median Value (attribute 14) is usually the target.

    :Attribute Information (in order):
        - CRIM     per capita crime rate by town
        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.
        - INDUS    proportion of non-retail business acres per town
        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)
        - NOX      nitric oxides concentration (parts per 10 million)
        - RM       average number of rooms per dwelling
        - AGE      proportion of owner-occupied units built prior to 1940
        - DIS      weighted distances to five Boston employment centres
        - RAD      index of accessibility to radial highways
        - TAX      full-value property-tax rate per $10,000
        - PTRATIO  pupil-teacher ratio by town
        - B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town
        - LSTAT    % lower status of the population
        - MEDV     Median value of owner-occupied homes in $1000's

    :Missing Attribute Values: None

    :Creator: Harrison, D. and Rubinfeld, D.L.

This is a copy of UCI ML housing dataset.
https://archive.ics.uci.edu/ml/machine-learning-databases/housing/


This dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.

The Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic
prices and the demand for clean air', J. Environ. Economics & Management,
vol.5, 81-102, 1978.   Used in Belsley, Kuh & Welsch, 'Regression diagnostics
...', Wiley, 1980.   N.B. Various transformations are used in the table on
pages 244-261 of the latter.

The Boston house-price data has been used in many machine learning papers that address regression
problems.   
     
.. topic:: References

   - Belsley, Kuh & Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.
   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.
  
 
import pandas as pd
from sklearn import datasets

boston = datasets.load_boston()

X = pd.DataFrame(boston.data, columns=boston.feature_names)
print(X.head())

     CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  
0  0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900  1.0  296.0   
1  0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671  2.0  242.0   
2  0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671  2.0  242.0   
3  0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622  3.0  222.0   
4  0.06905   0.0   2.18   0.0  0.458  7.147  54.2  6.0622  3.0  222.0  

   PTRATIO       B  LSTAT  
0     15.3  396.90   4.98  
1     17.8  396.90   9.14  
2     17.8  392.83   4.03  
3     18.7  394.63   2.94  
4     18.7  396.90   5.33  

target = pd.DataFrame(boston.target, columns=["MEDV"])
print(target.head())
   MEDV
0  24.0
1  21.6
2  34.7
3  33.4
4  36.2

boston = datasets.load_boston()

X = pd.DataFrame(boston.data, columns=boston.feature_names)
target = pd.DataFrame(boston.target, columns=["MEDV"])
y = target["MEDV"]

lm=LinearRegression()
lm.fit(X,y)
print("迴歸係數:", lm.coef_)
print("截距:",lm.intercept_)

迴歸係數: [-1.08011358e-01  4.64204584e-02  2.05586264e-02  2.68673382e+00
 -1.77666112e+01  3.80986521e+00  6.92224640e-04 -1.47556685e+00
  3.06049479e-01 -1.23345939e-02 -9.52747232e-01  9.31168327e-03
 -5.24758378e-01]
截距: 36.459488385089855

coef = pd.DataFrame(boston.feature_names, columns=["features"])
coef["estimatedCoeffcients"] = lm.coef_
print(coef)

   features  estimatedCoeffcients
0      CRIM             -0.108011
1        ZN              0.046420
2     INDUS              0.020559
3      CHAS              2.686734
4       NOX            -17.766611
5        RM              3.809865
6       AGE              0.000692
7       DIS             -1.475567
8       RAD              0.306049
9       TAX             -0.012335
10  PTRATIO             -0.952747
11        B              0.009312
12    LSTAT             -0.524758

plt.scatter(X.RM, y)
plt.xlabel("Average number of rooms per dwelling(RM)")
plt.ylabel("Housing price(MEDV)")
plt.title("Relationship between RM and Price")
plt.show()
![image](https://github.com/kysukuyu/Python/blob/main/RM.gif)
